import React, { useMemo, useState } from "react";
import styles from "./styles";
import { flatItems, FlatItem } from "./demoData";

// üîç –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
const highlightMatch = (text: string, query: string): React.ReactNode => {
  if (!query) return text;
  const lowerText = text.toLowerCase();
  const lowerQuery = query.toLowerCase();
  const startIndex = lowerText.indexOf(lowerQuery);
  if (startIndex === -1) return text;
  const endIndex = startIndex + query.length;

  return (
    <>
      {text.substring(0, startIndex)}
      <mark style={{ backgroundColor: "#ffe58f", padding: 0 }}>
        {text.substring(startIndex, endIndex)}
      </mark>
      {text.substring(endIndex)}
    </>
  );
};

const StructuredListBoxNavigator: React.FC = () => {
  const [search, setSearch] = useState("");
  const [selectedDirection, setSelectedDirection] = useState<string>("");
  const [selectedGroup, setSelectedGroup] = useState<string>("");
  const [selectedItem, setSelectedItem] = useState<FlatItem | null>(null);

  const directions = useMemo(
    () => Array.from(new Set(flatItems.map((i) => i.direction))),
    []
  );

  const groups = useMemo(() => {
    return selectedDirection
      ? Array.from(
          new Set(
            flatItems
              .filter((i) => i.direction === selectedDirection)
              .map((i) => i.group)
          )
        )
      : [];
  }, [selectedDirection]);

  const filteredItems = useMemo(() => {
    const lower = search.trim().toLowerCase();

    const matchStartsWith = (text?: string) =>
      !!text && text.toLowerCase().startsWith(lower);
    const matchIncludes = (text?: string) =>
      !!text && text.toLowerCase().includes(lower);

    // 1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ –≥—Ä—É–ø–ø–µ
    const baseItems = flatItems.filter(
      (i) =>
        (!selectedDirection || i.direction === selectedDirection) &&
        (!selectedGroup || i.group === selectedGroup)
    );

    // 2Ô∏è‚É£ –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≤—Å—ë
    if (lower === "") return baseItems;

    // 3Ô∏è‚É£ –¢–æ–ª—å–∫–æ —Ç–µ, –≥–¥–µ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ name –∏–ª–∏ description
    const startsWith = baseItems.filter((i) => matchStartsWith(i.name));
    const includes = baseItems.filter(
      (i) =>
        !startsWith.includes(i) &&
        matchIncludes(i.name)
    );
    const inDescription = baseItems.filter(
      (i) =>
        !startsWith.includes(i) &&
        !includes.includes(i) &&
        matchIncludes(i.description)
    );

    return [...startsWith, ...includes, ...inDescription];
  }, [search, selectedDirection, selectedGroup]);

  return (
    <div style={styles.wrapper}>
      <div style={styles.sidebar}>
        <label style={styles.label}>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</label>
        <select
          style={styles.select}
          value={selectedDirection}
          onChange={(e) => {
            setSelectedDirection(e.target.value);
            setSelectedGroup("");
            setSelectedItem(null);
          }}
        >
          <option value="">–í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</option>
          {directions.map((dir) => (
            <option key={dir} value={dir}>
              {dir}
            </option>
          ))}
        </select>

        <label style={{ ...styles.label, marginTop: "16px" }}>–ì—Ä—É–ø–ø–∞</label>
        <select
          style={styles.select}
          value={selectedGroup}
          onChange={(e) => {
            setSelectedGroup(e.target.value);
            setSelectedItem(null);
          }}
          disabled={!selectedDirection}
        >
          <option value="">–í—Å–µ –≥—Ä—É–ø–ø—ã</option>
          {groups.map((grp) => (
            <option key={grp} value={grp}>
              {grp}
            </option>
          ))}
        </select>
      </div>

      <div style={styles.content}>
        <input
          type="text"
          placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é..."
          value={search}
          onChange={(e) => {
            setSearch(e.target.value);
            setSelectedItem(null);
          }}
          style={styles.searchInput}
        />

        <ul style={styles.resultList}>
          {filteredItems.map((item) => (
            <li
              key={item.id}
              onClick={() => setSelectedItem(item)}
              style={{
                ...styles.resultItem,
                backgroundColor:
                  selectedItem?.id === item.id ? "#eef6ff" : "transparent",
              }}
            >
              <strong>{highlightMatch(item.name, search)}</strong>
              <div style={styles.meta}>
                {item.direction} / {item.group}
              </div>
            </li>
          ))}
          {filteredItems.length === 0 && (
            <li style={styles.noResult}>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</li>
          )}
        </ul>

        <div style={styles.detailsBox}>
          {selectedItem ? (
            <>
              <h4 style={styles.detailsTitle}>{selectedItem.name}</h4>
              <div style={styles.metaSmall}>
                {selectedItem.direction} / {selectedItem.group}
              </div>
              <p style={styles.description}>
                {selectedItem.description || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}
              </p>
            </>
          ) : (
            <>
              <h4 style={styles.detailsTitle}>
                –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
              </h4>
              <p style={styles.description}>
                –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ
                –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–∏–ø –∏ –æ–ø–∏—Å–∞–Ω–∏–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–æ—á–Ω–µ–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤
                –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
              </p>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default StructuredListBoxNavigator;